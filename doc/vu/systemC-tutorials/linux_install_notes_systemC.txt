1) In the INSTALL file inside the SystemC library, you are supposed to set a variable as follows:

setenv CXX g++

For most of you this command will probably not work, since most Linux distributions nowadays set the Bash shell as a default. So you can use the equivalent command instead:

export CXX=g++

This change is local to the shell window where you do the actual export. If you open a new shell, you will have to retype the command again. To make the change permanent, you can append the command at the end of your /home/user_name/.bashrc file.



2) To compile your code, you can use the template Makefile that I uploaded on the website. Change the path according to your installation and then run:

make 

By default, the "make" command will look for a file called Makefile. If you change the file name, you have to type:

make -f file_name

3) First error-fix example

Compiling SystemC From GluCki 

A SIMPLE PROGRAM TO PRINT HELLO WORLD
// All systemc modules should include systemc.h header file
   #include "systemc.h"
// Hello_world is module name
 SC_MODULE (hello_world) {
   SC_CTOR (hello_world) {
     // Nothing in constructor 
   }
   void say_hello() {
     //Print "Hello World" to the console.
     cout << "Hello World.\n";
   }
 };
 
 // sc_main in top level function like in C++ main
 int sc_main(int argc, char* argv[]) {
   hello_world hello("HELLO");
   // Print the hello world
   hello.say_hello();
   return(0);
 }

Now to compile the above mentioned program, execute the following command: 

 g++ -I. -I$SYSTEMC_HOME/include -L. -L$SYSTEMC_HOME/lib-linux -o sim hello.cpp -lsystemc 

On doing so you may encounter the following error:
 : fatal error: systemc.h: No such file or directory compilation terminated.

This is because you have not specified the path for value of SYSTEMC_HOME variable used above.

You can set the variable value using the following command (assuming you have installed systemc in /usr/local/systemc-2.3.0):
  export SYSTEMC_HOME=/usr/local/systemc-2.3.0 

You may still face the same error. This can be because your system may be 64 bit or your installation may not be proper. If you have 64 bit system, change the compiling command to:
  g++ -I. -I$SYSTEMC_HOME/include -L. -L$SYSTEMC_HOME/lib-linux64 -o sim hello.cpp -lsystemc 

Now if everything goes right, your code will compile successfully, but you may face another error, when you try to run the executable. 
  error while loading shared libraries: libsystemc-2.3.0.so: cannot open shared object file:  
  No such file or directory 

To remove the error set the value of LD_LIBRARY_PATH to the lib-linux directory in the systemc directory by using the following command:
 export LD_LIBRARY_PATH=/usr/local/systemc-2.3.0/lib-linux

For the 64-bit system users, set the variable value as
  export LD_LIBRARY_PATH=/usr/local/systemc-2.3.0/lib-linux64

To save yourself from setting the above mentioned variables again and again, you can put them in .bashrc.

You can get .bashrc file in home directory.You can see this file by typing "ls -a". After this edit it in any text editor and then paste the above "export" commands in the file and then save it.

Retrieved from "https://glug.nith.ac.in/~wiki/index.php?title=Compiling_Systemc&oldid=381" 

